#!/usr/bin/env bash

set -e

export DEBIAN_FRONTEND=noninteractive

# TODO hello blabla
#  You need to have at least X GB of RAM to run this script.

echo "blabla"

# Check that we are on linux
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
  echo "This script is only for linux"
  exit 1
fi




# Deps
echo "Installing dependencies..."

echo "Please enter your sudo password now:"
sudo echo ""

# Update apt
echo "Updating apt cache..."
sudo apt-get -qq update
sudo apt-get install -y -qq git apt-utils gettext-base
sudo apt-get install -y -qq ca-certificates curl gnupg

# Setup docker (https://docs.docker.com/engine/install/ubuntu/)
echo "Installing docker..."
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get -qq update
sudo apt-get install -y -qq docker-ce docker-ce-cli containerd.io

echo "Staring docker service..."
sudo service docker start


echo "Dependencies installed!"

# Clone app
echo "Installing pedaki app from github"
git clone https://github.com/PedakiHQ/pedaki-community.git &> /dev/null || true
cd pedaki-community

echo "Installing tools"
./tools-cli prepare .env.production

PEDAKI_APP_TAG=$1
if [[ -z "$PEDAKI_APP_TAG" ]]; then
  # Ask for the version
  echo "What version do you want to install ? (default: 'latest')"
  echo "You can find the list of versions here: https://github.com/PedakiHQ/pedaki/pkgs/container/pedaki/versions"
  read -r PEDAKI_APP_VERSION
  if [[ -z "$PEDAKI_APP_TAG" ]]; then
    PEDAKI_APP_TAG="latest"
    echo "Using default version: $PEDAKI_APP_TAG"
  else
    echo "Using provided version: $PEDAKI_APP_TAG"
  fi
else
  echo "(parameter) Using provided version: $PEDAKI_APP_TAG"
fi

DOMAIN=$2
if [[ -z "$DOMAIN" ]]; then
  # Ask for the domain
  echo "What domain do you want to use ? (default: 'localhost')"
  read -r DOMAIN
  if [[ -z "$DOMAIN" ]]; then
    DOMAIN="localhost"
    echo "Using default domain: $DOMAIN"
  else
    echo "Using provided domain: $DOMAIN"
  fi
else
  echo "(parameter) Using provided domain: $DOMAIN"
fi

# Pull latest changes if the repo already exists
if [[ "$PEDAKI_APP_TAG" == "latest" ]]; then
  echo "Pulling latest changes..."
  git checkout main &> /dev/null || true
  git pull &> /dev/null || true
else
  echo "Checking out version $PEDAKI_APP_TAG..."
  git fetch --all --tags &> /dev/null || true
  git checkout "$PEDAKI_APP_TAG"
fi




# Go back to root
cd ..

# Add caddyfile (https://caddyserver.com/docs/automatic-https)
# TODO: use production letsencrypt
TLS_BLOCK="acme_ca https://acme-staging-v02.api.letsencrypt.org/directory"
rm -f Caddyfile
envsubst > Caddyfile <<EOF
{
  $TLS_BLOCK
}
https://$DOMAIN, :80, :443 {
  reverse_proxy http://web:8000
}
EOF

# Write .env file
envsubst > .env.production <<EOF
DOMAIN=$DOMAIN
PEDAKI_APP_TAG=$PEDAKI_APP_TAG

DATABASE_URL=mysql://pedaki:pedaki@db:3306/pedaki
EOF
export $(cat .env.production | xargs)

# Start docker compose
echo "Configuring Docker Compose...."
rm -f docker-compose.yml
cp pedaki-community/docker-compose.yml docker-compose.yml.tmpl
envsubst < docker-compose.yml.tmpl > docker-compose.yml
rm docker-compose.yml.tmpl
echo "Starting Docker Compose...."
sudo -E docker compose -f docker-compose.yml up -d

echo "Waiting for the app to be ready..."
echo "This can take a few minutes..."
# TODO: call /_health endpoint
bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost)" != "200" ]]; do sleep 5; done'
echo "App is ready!"