#!/usr/bin/env bash

set -e

export DEBIAN_FRONTEND=noninteractive

# TODO hello blabla
#  You need to have at least X GB of RAM to run this script.

echo "blabla"

# Check that we are on linux
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
  echo "This script is only for linux"
  exit 1
fi




# Deps
echo "Installing dependencies..."

echo "Please enter your sudo password now:"
sudo echo "Password accepted!"

# Update apt
echo "Updating apt cache..."
sudo apt-get -qq update > /dev/null
sudo apt-get install -y -qq git apt-utils gettext-base > /dev/null
sudo apt-get install -y -qq ca-certificates curl gnupg > /dev/null

# Setup docker (https://docs.docker.com/engine/install/ubuntu/)
echo "Installing docker..."
sudo install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo chmod a+r /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get -qq update
sudo apt-get install -y -qq docker-ce docker-ce-cli containerd.io

echo "Staring docker service..."
sudo service docker start

echo "Dependencies installed!"
echo ""


# Clone app (only used to pull the latest version of the cli - and docker-compose.yml)
echo "Installing pedaki app from github"
git clone https://github.com/PedakiHQ/pedaki-community.git &> /dev/null || true
cd pedaki-community

# TODO: remove
git checkout init-auth

echo "Installing pedaki cli"
./bin/cli-install
pedaki env generate --domain "$DOMAIN" --tag "$PEDAKI_APP_TAG"
export $(grep -v '^#' .env.production.local | xargs)

# Go back to root
cd ..

# Add caddyfile (https://caddyserver.com/docs/automatic-https)
# TODO: use production letsencrypt
TLS_BLOCK="acme_ca https://acme-staging-v02.api.letsencrypt.org/directory"
rm -f Caddyfile
envsubst > Caddyfile <<EOF
{
  $TLS_BLOCK
}
https://$DOMAIN, :80, :443 {
  reverse_proxy http://web:8000
}
EOF

# Start docker compose
echo "Configuring Docker Compose...."
rm -f docker-compose.yml
cp pedaki-community/docker-compose.yml docker-compose.yml.tmpl
envsubst < docker-compose.yml.tmpl > docker-compose.yml
rm docker-compose.yml.tmpl
echo "Starting Docker Compose...."
sudo -E docker compose -f docker-compose.yml up -d

echo "Waiting for the app to be ready..."
echo "This can take a few minutes..."
# TODO: call /_health endpoint
bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost)" != "200" ]]; do sleep 5; done'
echo "App is ready!"