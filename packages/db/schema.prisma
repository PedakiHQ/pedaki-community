generator client {
  provider = "prisma-client-js"
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "./src/encryption/migrations"

  concurrently = false
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id") @db.VarChar(25)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id                String    @id @default(cuid()) @db.VarChar(25)
  name              String
  email             String    @unique
  emailVerified     DateTime? @map("email_verified")
  password          String?
  needResetPassword Boolean   @default(false) @map("need_reset_password")
  active            Boolean   @default(false)
  blocked           Boolean   @default(false)

  image String @default("") @db.VarChar(1000)

  accounts Account[]
  tokens   Token[]

  @@index([id])
  @@map("users")
}

model Token {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("created_at")
  type      TokenType

  token     String /// @encrypted
  tokenHash String? @map("token_hash") @db.VarChar(320) /// @encryption:hash(token)

  expiresAt DateTime? @map("expires_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id") @db.VarChar(25)

  @@unique([type, token], name: "unique_token")
  @@index([userId])
  @@index([tokenHash])
  @@map("tokens")
}

model WorkspaceSetting {
  id        Int      @id @default(1) // useless but required by prisma
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // These informations are cloned on api.pedaki.fr (not on self-host)
  // some of them are only used for the hosted version
  name                     String  @db.VarChar(30)
  contactEmail             String? @map("contact_email") @db.VarChar(255) // Might be different from the stripe email (null on self-host)
  contactName              String? @map("contact_name") @db.VarChar(128) // Might be different from the stripe name (null on self-host)
  defaultLanguage          String  @map("default_language") @db.Char(3) // iso code of the language
  currentMaintenanceWindow String? @map("current_maintenance_window") @db.VarChar(128) // "SAT:02:00-SAT:05:00" for example (null on self-host)
  maintenanceWindow        String? @map("maintenance_window") @db.VarChar(128) // will be applied on the next maintenance window (null on self-host)

  // end cloned informations

  // end settings
  @@map("settings")
}

enum TokenType {
  CONFIRM_EMAIL
  ACTIVATE_ACCOUNT
  RESET_PASSWORD
}
