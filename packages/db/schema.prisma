generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

generator fieldEncryptionMigrations {
  provider = "prisma-field-encryption"
  output   = "./src/encryption/migrations"

  concurrently = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                Int     @id @default(autoincrement())
  userId            String  @map("user_id") @db.VarChar(25)
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id                String    @id @default(cuid()) @db.VarChar(25)
  name              String
  email             String    @unique
  emailVerified     DateTime? @map("email_verified")
  password          String?
  needResetPassword Boolean   @default(false) @map("need_reset_password")
  active            Boolean   @default(false)
  blocked           Boolean   @default(false)

  image String @default("") @db.VarChar(1000)

  accounts Account[]
  tokens   Token[]
  teacher  Teacher?

  @@index([id])
  @@map("users")
}

model Token {
  id Int @id @default(autoincrement())

  createdAt DateTime  @default(now()) @map("created_at")
  type      TokenType

  token     String /// @encrypted
  tokenHash String? @map("token_hash") @db.VarChar(320) /// @encryption:hash(token)

  expiresAt DateTime? @map("expires_at")

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @map("user_id") @db.VarChar(25)

  @@unique([type, token], name: "unique_token")
  @@index([userId])
  @@index([tokenHash])
  @@map("tokens")
}

model WorkspaceSetting {
  id        Int      @id @default(1) // useless but required by prisma
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // These informations are cloned on api.pedaki.fr (not on self-host)
  // some of them are only used for the hosted version
  name                     String  @db.VarChar(30)
  contactEmail             String? @map("contact_email") @db.VarChar(255) // Might be different from the stripe email (null on self-host)
  contactName              String? @map("contact_name") @db.VarChar(128) // Might be different from the stripe name (null on self-host)
  defaultLanguage          String  @map("default_language") @db.Char(3) // iso code of the language
  currentMaintenanceWindow String? @map("current_maintenance_window") @db.VarChar(128) // "SAT:02:00-SAT:05:00" for example (null on self-host)
  maintenanceWindow        String? @map("maintenance_window") @db.VarChar(128) // will be applied on the next maintenance window (null on self-host)

  // end cloned informations
  @@map("settings")
}

model Student {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  identifier String? @unique @db.VarChar(255) // If null use the firstName + lastName + otherName + birthDate to identify the student

  firstName String  @map("first_name") @db.VarChar(255)
  lastName  String  @map("last_name") @db.VarChar(255)
  otherName String? @map("other_name") @db.VarChar(255) // 3rd name etc... just in case

  birthDate DateTime @map("birth_date") @db.Date

  properties Json @db.JsonB

  // Many to many relation - A student can be in multiple classes (ex: double cursus)
  classes Class[] @relation("class_to_student")

  importStudent ImportStudent[]

  @@map("students")
}

// Use the property id to map with the Student properties json (key = id)
model Property {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name     String       @unique @db.VarChar(255)
  type     PropertyType
  required Boolean      @default(false)

  @@map("properties")
}

enum PropertyType {
  LEVEL
}

model Teacher {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // A teacher can be in multiple classes
  classes   Class[] @relation("class_to_teacher")
  // But can only be the main teacher of one class
  mainClass Class?  @relation("main_teacher")

  name String @db.VarChar(255) // Default if the teacher is not linked to a user (can be different from the user name)

  // A teacher can be linked to a user
  userId String? @unique @map("user_id") @db.VarChar(25)
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("teachers")
}

// Ex: 1st year, 2nd year, 3rd year, ...
model ClassLevel {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)
  color       String  @db.Char(7) // Hexadecimal color

  classes          Class[]       @relation("class_to_level")
  possibleBranches ClassBranch[] @relation("branch_to_level")

  importClassLevel ImportClassLevel[]

  @@map("class_levels")
}

// ex: Science, Math, ...
model ClassBranch {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)
  color       String  @db.Char(7) // Hexadecimal color

  possibleLevels ClassLevel[] @relation("branch_to_level")

  classes Class[] @relation("branch_to_class")

  @@map("class_branches")
}

model Room {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)

  // Relations
  classes Class[] @relation("class_to_room")

  @@map("rooms")
}

// Ex: 2020-2021
model AcademicYear {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  startDate DateTime @map("start_date") @db.Date
  endDate   DateTime @map("end_date") @db.Date

  name String @unique @db.VarChar(255) // Ex: 2020-2021

  // Relations
  classes Class[] @relation("class_to_academic_year")

  @@map("academic_years")
}

model Class {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  name        String  @db.VarChar(255)
  description String? @db.VarChar(1000)

  // A main teacher is the one who is in charge of the class (and is responsible for only one class)
  mainTeacherId Int?     @unique @map("main_teacher_id")
  mainTeacher   Teacher? @relation("main_teacher", fields: [mainTeacherId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Relations
  teachers Teacher[] @relation("class_to_teacher")
  students Student[] @relation("class_to_student")

  levelId Int        @map("level_id") // ex: 1st year, 2nd year, 3rd year, ...
  level   ClassLevel @relation("class_to_level", fields: [levelId], references: [id], onDelete: Cascade)

  branch ClassBranch[] @relation("branch_to_class")

  // If the class as assigned rooms, they will be listed here
  rooms Room[] @relation("class_to_room")

  // A class is linked to an academic year
  academicYearId Int          @map("academic_year_id")
  academicYear   AcademicYear @relation("class_to_academic_year", fields: [academicYearId], references: [id])

  // Status of the class
  status ClassStatus @default(ACTIVE)

  importClass ImportClass[]

  @@unique([name])
  @@index([academicYearId, levelId])
  @@map("classes")
}

enum ClassStatus {
  ACTIVE // The class is active and can be used
  ARCHIVED // The class is archived and cannot be used
}

enum TokenType {
  CONFIRM_EMAIL
  ACTIVATE_ACCOUNT
  RESET_PASSWORD
}

// Student Imports

model Import {
  id        String       @id @default(cuid()) @db.VarChar(25)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @default(now()) @updatedAt @map("updated_at")
  status    ImportStatus
  data      Json?        @db.JsonB

  students   ImportStudent[]
  class      ImportClass[]
  classLevel ImportClassLevel[]

  @@map("imports")
}

model ImportStudent {
  id       Int    @id @default(autoincrement())
  importId String @map("import_id") @db.VarChar(25)
  import   Import @relation(fields: [importId], references: [id], onDelete: Cascade)

  studentId Int?     @map("student_id")
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  firstName String   @map("first_name") @db.VarChar(255)
  lastName  String   @map("last_name") @db.VarChar(255)
  otherName String?  @map("other_name") @db.VarChar(255)
  birthDate DateTime @map("birth_date")

  impotClasses ImportClass[]

  @@unique([importId, studentId])
  @@map("import_students")
}

model ImportClass {
  id       Int    @id @default(autoincrement())
  importId String @map("import_id") @db.VarChar(25)
  import   Import @relation(fields: [importId], references: [id], onDelete: Cascade)

  classId Int?   @map("class_id")
  class   Class? @relation(fields: [classId], references: [id], onDelete: Cascade)

  name String @db.VarChar(255)

  importLevelId Int              @map("level_id")
  importLevel   ImportClassLevel @relation(fields: [importLevelId], references: [id], onDelete: Cascade)

  importStudents ImportStudent[]

  @@unique([importId, classId])
  @@map("import_classes")
}

model ImportClassLevel {
  id       Int    @id @default(autoincrement())
  importId String @map("import_id") @db.VarChar(25)
  import   Import @relation(fields: [importId], references: [id], onDelete: Cascade)

  classLevelId Int?        @map("class_level_id")
  classLevel   ClassLevel? @relation(fields: [classLevelId], references: [id], onDelete: Cascade)

  name String @db.VarChar(255)

  importClass ImportClass[]

  @@unique([importId, classLevelId])
  @@map("import_class_levels")
}

enum ImportStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}
